- hosts: k8s
  become: yes
  tasks:
    - name: sysctl config File Create
      file:
        path: /etc/sysctl.d/kubernetes.conf
        state: touch
   
    - name: sysctl config File Create
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch

    - name: nf-call-ip6tables Insert kubernetes.conf
      lineinfile:
        path: /etc/sysctl.d/kubernetes.conf
        line: "net.bridge.bridge-nf-call-ip6tables = 1"

    - name: nf_call_iptables Insert kubernetes.conf
      lineinfile:
        path: /etc/sysctl.d/kubernetes.conf
        line: "net.bridge.bridge-nf-call-iptables = 1"

    - name: ipv4_Forward Insert kubernetes.conf
      lineinfile:
        path: /etc/sysctl.d/kubernetes.conf
        line: "net.ipv4.ip_forward = 1"
   
    - name: modules add k8s
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "overlay"
   
    - name: ipv4_Forward Insert kubernetes.conf
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "br_netfilter"

    - name: fstab swap off
      lineinfile:
        path: /etc/fstab
        regexp: '/swap'
        state: absent
    - name: bashrc kube config 
      lineinfile:
        path: $HOME/.bashrc
        line: "KUBECONFIG=/etc/kubernetes/admin.conf"


    - name: Containerd config Copy
      shell: "{{item}}"
      with_items:
        - "mkdir -p /etc/containerd" 
        - "swapoff -a" 
        - "containerd config default > /etc/containerd/config.toml" 
        - "sed -i s/'SystemdCgroup = false'/'SystemdCgroup = true'/g /etc/containerd/config.toml " 
        - "modprobe overlay" 
        - "modprobe br_netfilter"
        - "sysctl --system"
    
    - name: Restart HAProxy service
      systemd:
        name: containerd
        state: restarted

    - name: Restart HAProxy service
      systemd:
        name: kubelet
        enabled: yes
        state: started

- hosts: controller01 
  become: yes
  gather_facts: false
  tasks: 
    - name: k8s setting
      shell: "{{item}}"
      with_items:
        - "echo 'y'|kubeadm reset"
        - "kubeadm token create"
        - "kubeadm init --control-plane-endpoint \"vipaddr:16443\" --upload-certs |grep \"certificate-key\"|grep 'control-plane'|awk '{print $3}' > /tmp/test2"
        - "openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //' > /tmp/ssltoken"
        - "export KUBECONFIG=/etc/kubernetes/admin.conf"
        - "mkdir -p $HOME/.kube"
        - "cp -a /etc/kubernetes/admin.conf $HOME/.kube/config"
        - "chown $(id -u):$(id -g) $HOME/.kube/config"
        - "export KUBECONFIG=/etc/kubernetes/admin.conf"
        - "kubeadm token list |tail -1 |cut -c1-23 > /tmp/token"
        - "kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.4/manifests/calico.yaml"


    - name: Read contents of /tmp/test2
      shell: cat /tmp/test2
      register: cert

    - set_fact:
        cert_var: "{{ cert.stdout }}"
    
    - name: Read contents of /tmp/ssltoekn
      shell: cat /tmp/ssltoken
      register: hash

    - set_fact:
        token_var: "{{ hash.stdout }}"
    - name: Read contents of /tmp/toekn
      shell: cat /tmp/token
      register: token

    - set_fact:
        hash_var: "{{ token.stdout }}"


- name: Use variable content on controller_02
  hosts: controller_salve
  become: yes
  gather_facts: false
  tasks:
    - name : cert reset
      shell: echo "{{ hostvars['controller_01'].cert_var }}"
      delegate_to: controller_01
      register: cert_var
    - name : token reset
      shell: echo "{{ hostvars['controller_01'].hash_var }}"
      delegate_to: controller_01
      register: token_var
    - name : hash reset
      shell: echo "{{ hostvars['controller_01'].token_var }}"
      delegate_to: controller_01
      register: hash_var
    


    - name: k8s setting
      shell: "{{ item }}"
      with_items:
        - "echo 'y'|kubeadm reset"
        - "kubeadm join vipaddr:16443 --token {{token_var.stdout}} --discovery-token-ca-cert-hash sha256:{{hash_var.stdout}}  --control-plane --certificate-key {{cert_var.stdout}}"
        - "mkdir -p $HOME/.kube"
        - "cp -a /etc/kubernetes/admin.conf $HOME/.kube/config"
        - "chown $(id -u):$(id -g) $HOME/.kube/config"

    - debug:
        msg: "{{ cert_var.stdout}}"
        msg: "{{ hash_var.stdout}}"
        msg: "{{ token_var.stdout}}"

- name: work node join
  hosts: worknode
  become: yes
  gather_facts: false
  tasks:
    - name : cert reset
      shell: echo "{{ hostvars['controller_01'].cert_var }}"
      delegate_to: controller_01
      register: cert_var
    - name : token reset
      shell: echo "{{ hostvars['controller_01'].hash_var }}"
      delegate_to: controller_01
      register: token_var
    - name : hash reset
      shell: echo "{{ hostvars['controller_01'].token_var }}"
      delegate_to: controller_01
      register: hash_var
    


    - name: k8s setting
      shell: "{{ item }}"
      with_items:
        - "echo 'y'|kubeadm reset"
        - "kubeadm join vipaddr:16443 --token {{token_var.stdout}} --discovery-token-ca-cert-hash sha256:{{hash_var.stdout}}"

    - debug:
        msg: "{{ cert_var.stdout}}"
        msg: "{{ hash_var.stdout}}"
        msg: "{{ token_var.stdout}}"
